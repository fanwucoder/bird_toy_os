// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powers_of_two;
    /** Initializes the library. */
    function void init() {
        let powers_of_two = Array.new(16);
        let powers_of_two[0] = 1;
        let powers_of_two[1] = 2;
        let powers_of_two[2] = 4;
        let powers_of_two[3] = 8;
        let powers_of_two[4] = 16;
        let powers_of_two[5] = 32;
        let powers_of_two[6] = 64;
        let powers_of_two[7] = 128;
        let powers_of_two[8] = 256;
        let powers_of_two[9] = 512;
        let powers_of_two[10] = 1024;
        let powers_of_two[11] = 2048;
        let powers_of_two[12] = 4096;
        let powers_of_two[13] = 8192;
        let powers_of_two[14] = 16384;
        let powers_of_two[15] = 16384+16384;
        return;

    }
    function boolean bit(int x,int j){
        return ~((x&powers_of_two[j])=0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0){
        let    x=-x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum,shifedX,i;
        let sum=0;
        let shifedX=x;
        let i=0;
        while(i<16){
            if (Math.bit(y,i)){
                let sum=sum+shifedX;
            }
            let shifedX= shifedX+shifedX;
            let i=i+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int ret,q;
        var boolean neg_x,neg_y;
        let neg_x=x<0;
        let neg_y=y<0;
        let x=Math.abs(x);
        let y=Math.abs(y);
        if (y>x){
            let ret=0;
        }else{
            let q=Math.divide(x,y+y);
            if((x-((q+q)*y))<y){
                let ret=q+q;
            }else{
                let ret=q+q+1;
            }
            if (~(neg_x=neg_y)){
                let ret=-ret;
            }
        }
       
        return ret;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int n,j,y;
        var in a;
        let j=7;
        let y=0;
        while((j>0) | (j=0)){
            let a=y+powers_of_two[j];
            let a=Math.multiply(a,a);
            if (((a=x)|(a<x))&(a>0)){
                let y=y+powers_of_two[j];
            }
            let j=j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a<b){
            let a=b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a>b){
            let a=b;
        }
        return a;
    }
}
